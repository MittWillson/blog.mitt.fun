{"meta":{"title":"Mitt's Fun space!","subtitle":null,"description":"Mitt 的菜鸡技术博客 | 可恶的Edison","author":"Mitt Willson","url":"https://blog.mitt.fun","root":"/"},"pages":[{"title":"About Me","date":"2018-05-01T13:17:01.000Z","updated":"2021-03-03T11:02:00.000Z","comments":true,"path":"about/index.html","permalink":"https://blog.mitt.fun/about/index.html","excerpt":"","text":"img[alt=lgbta] { max-width: 20px !important;display: inline;vertical-align: sub; } 君の名は我有过很多的名字，目前通用的是 Mitt, 拓海真一 其他信息性别是：男 性向是： 生日是：农历三月二十三 (但其实我也过公历，这样就可以过两次生日了，逃) 年龄是：不详 (以前总嫌自己年纪大，现在想想那会才未成年，哭) 关于昵称和别人不一样的是，我很喜欢别人给我起绰号、昵称，即便有些一开始是带贬义性的，如果之后淡化我也同样会接受，至今为止有很多人给我起过昵称，比如 小学生 这个昵称也一开始带有一点点贬义意味的，来源于我加入的一个小群，但是没有恶意慢慢叫开以后就接受了，其中叫的最多的是和我关系很好的一个朋友，之后也一起工作过，慢慢将这个昵称带入了公司，所以如果你是现实认识的朋友，关系也比较好，年纪也比我大，我会更倾向于让你叫我 小学生（偷偷说明一下这个昵称甚至已经普及到老板那里，连老板都这么叫我, 逃)。 而如果是一开始QQ认识的人大多会叫我 真一，这也是我曾经的正式昵称叫法，现在会这么叫我的大概就只剩下很早认识的朋友和网友了。 还有很多很多上学时期起的绰号，但那时候大多数都是带有歧视性和贬义的，但也有很多接受了以后朋友之间那么叫的，比如还有说我有点娘炮给我起的，但事实上并不（自信），就不列举了。 所以如果你和我的关系很好，并主动给我起一个昵称来这么叫我，我并不会感到反感，反而会使我们关系更近一步（我是指普通朋友关系，但你要长得好看其他关系也不是不行，逃） /[喜欢的|玩过的]游戏/PC: 黑暗之魂3 怪物猎人: 世界 方舟 Tom Clancy’s: Ghost Recon 100% Orange Juice Tower Unite UNO Don’t Starve Together Sniper Elite 4 破门而入: 行动小队 传送门 刺客信条: 黑旗 Mobile: 王者农药 三国杀 Nintendo Switch: 马里奥派对 动物森友会(曾经) 异度神剑2 异度神剑完全版 九张羊皮纸 /(喜欢的|看过的)电视剧/ 在追/在看 剧名 国家 目前感受 赘婿 中国 和庆余年类似，剧组也是庆余年原班人马 往期 剧名 国家 推荐指数 评价 半泽直树1-2 日本 强烈推荐 爽 (银行员) 李狗嗨1-3 日本 强烈推荐 爽 (律师) 行骗天下 日本 强烈推荐 都是套路 欺诈游戏 日本 非常推荐 圣母婊到极致就是真圣母 我是大哥大 日本 强烈推荐 超喜欢三桥(贺来贤人) 庆余年1 中国 强烈推荐 爽文爽剧 老友记 美国 非常推荐 这才是生活 生活大爆炸 美国 非常推荐 这才是生活 权力的游戏 美国 半推荐 超烂尾, 但前面几季很好看 绝命毒师 美国 非常推荐 就是很多时候觉得老白智商短暂下线 南方公园 美国 非常推荐 不适合所有人观看 怪奇物语 美国 非常推荐 为什么总要迫害威尔家 神秘博士 英国 一般推荐 10季以后就有点不行了 技能树 PHP Golang Python 易语言 C++ C# .Net Flutter Javascript Typescript Nodejs Angular Vue Yii2 Kubernetes k3s Docker … 喜欢的人至今为止真正喜欢过的人一个手就能列举出来，现实中只有一个，从小学开始喜欢到初中然后最终绝交的好朋友，更多的只是网络上连面都没有见过的人，无一例外这些人更多的只是伤害我。 我喜欢瘦瘦的长的帅或者可爱的人，但这只是眼缘，我同样喜欢说话举动可爱心细的男孩子，不一定要兴趣爱好相近，如果能互相影响可能对我来说会更好，喜欢更主动的人，我比较敏感，对好对坏都是。 口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口 心理状态 (建议不看跳过) 口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口口 OneMoreThings:( 在彻底分清楚谁是朋友之前不再列出我的朋友"},{"title":"","date":"2021-03-14T16:38:17.512Z","updated":"2021-03-14T16:38:17.512Z","comments":true,"path":"icons/manifest.json","permalink":"https://blog.mitt.fun/icons/manifest.json","excerpt":"","text":"{\"name\":\"App\",\"icons\":[{\"src\":\"/android-icon-36x36.png\",\"sizes\":\"36x36\",\"type\":\"image/png\",\"density\":\"0.75\"},{\"src\":\"/android-icon-48x48.png\",\"sizes\":\"48x48\",\"type\":\"image/png\",\"density\":\"1.0\"},{\"src\":\"/android-icon-72x72.png\",\"sizes\":\"72x72\",\"type\":\"image/png\",\"density\":\"1.5\"},{\"src\":\"/android-icon-96x96.png\",\"sizes\":\"96x96\",\"type\":\"image/png\",\"density\":\"2.0\"},{\"src\":\"/android-icon-144x144.png\",\"sizes\":\"144x144\",\"type\":\"image/png\",\"density\":\"3.0\"},{\"src\":\"/android-icon-192x192.png\",\"sizes\":\"192x192\",\"type\":\"image/png\",\"density\":\"4.0\"}]}"},{"title":"留言板 ლ(°◕‵ƹ′◕ლ)","date":"2021-02-25T12:33:26.000Z","updated":"2021-03-14T16:38:17.516Z","comments":true,"path":"messages/index.html","permalink":"https://blog.mitt.fun/messages/index.html","excerpt":"","text":"这里是畅所欲言的留言板，相信没有朋友的我这里应该是空的呢 :( sad"}],"posts":[{"title":"利用 Cloudflare Workers 创建一个跳转友链服务(乞丐级简易版)","slug":"script/cf-workers-redirect-to-friends","date":"2021-03-03T12:33:09.000Z","updated":"2021-03-03T12:33:09.000Z","comments":true,"path":"scripts/2021/script/cf-workers-redirect-to-friends/","link":"","permalink":"https://blog.mitt.fun/scripts/2021/script/cf-workers-redirect-to-friends/","excerpt":"pre-post()水了几篇博文胆子肥了起来，开始到处交换友链，但是想创建一个简便易维护的友链服务，前期先实现能跳转到目标链接，后期想能扩展扩展支持监控友链目标网站的有效状态，结合通知来实现报警，但本篇只实现了 能用 （逃，如果没咕咕咕的话以后会升级代码并支持更高级的功能然后再水一篇发布新文章来介绍。 更新日期: 2021-03-03","text":"pre-post()水了几篇博文胆子肥了起来，开始到处交换友链，但是想创建一个简便易维护的友链服务，前期先实现能跳转到目标链接，后期想能扩展扩展支持监控友链目标网站的有效状态，结合通知来实现报警，但本篇只实现了 能用 （逃，如果没咕咕咕的话以后会升级代码并支持更高级的功能然后再水一篇发布新文章来介绍。 更新日期: 2021-03-03 reuqired(‘依赖’)需要做以下步骤 创建一个 KV 仓库 创建一个 Worker 将 KV 关联到 Worker 并命名为 FRIENDS 将 代码本体 复制到 Worker code(‘代码本体’)123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657addEventListener(&#x27;fetch&#x27;, event =&gt; &#123; event.respondWith(handleRequest(event.request))&#125;)const domains = &#123; get(name) &#123; return FRIENDS.get(name); &#125;&#125;;/** * Respond to the request * @param &#123;Request&#125; request */async function handleRequest(request) &#123; const url = new URL(request.url); const host = url.host; const path = url.pathname; let friendName = (host.match(/^(.*?)(?=\\.)/g) || [])[0]; let redirect = null; // friends.mitt.fun/&#123;name&#125; if (friendName === &#x27;friends&#x27;) &#123; const r = /^\\/?([^\\/]*)\\/?(.*?)$/g.exec(path) || []; if (path.match(/^\\/?$/g)) &#123; return indexPage(); &#125; friendName = r[1]; const fUrl = await domains.get(friendName); if (fUrl) &#123; redirect = fUrl.replace(/\\/$/g, &#x27;&#x27;) + &#x27;/&#x27; + (r[2] || &#x27;&#x27;); &#125; &#125; else &#123; const fUrl = await domains.get(friendName); if (fUrl) &#123; redirect = fUrl.replace(/\\/$/g, &#x27;&#x27;) + path; &#125; &#125; if (!redirect) &#123; return noFriendAnyMore(friendName); &#125; return redirectTo(friendName, redirect);&#125;function noFriendAnyMore(friendName) &#123; return new Response(`Sorry, $&#123;friendName || &#x27;this one&#x27;&#125; is not be my firends anymore.`, &#123;status: 200&#125;);&#125;function redirectTo(friendName, url) &#123; return new Response(&#x27;You are going to Mitt\\&#x27;s friend\\&#x27;s area&#x27;, &#123;status: 302, headers: &#123;location: url&#125;&#125;)&#125;function indexPage() &#123; return new Response(`Hi there, this is Mitt&#x27;s Friends redirector, nice to see you :)`)&#125; subject(‘目前功能介绍’)目前实现以下两种访问方式 https://{KEY}.mitt.fun 通过域名最底层的名字 &#123;KEY&#125; 来关联 KV 服务中的 Key 值 你可以定义任何层级的域名，只要最外面是 &#123;KEY&#125; 就可以了, 比如 https://&#123;KEY&#125;.friends.of.mine.mitt.fun 也同样会匹配 https://friends.mitt.fun/{KEY} 通过访问 Path 的第一层 &#123;KEY&#125; 来关联 KV 服务中的 Key 值 以上的两种方式都支持传递路径，即通过在后面跟上 /xxxx 来转发到目标网址的 /xxxx subject(‘example’)自定义域名方式转发: 关联 edison.mitt.fun 域名到创建的 Worker 在 KV 服务中填写 Key 为 edison, Value 为 https://www.wevg.org 测试访问 https://edison.mitt.fun 会302跳转到 https://www.wevg.org 测试访问 https://edison.mitt.fun/friends/ 会302跳转到 https://www.wevg.org/friends/ 目录方式转发: 关联 friends.mitt.fun 域名到创建的 Worker 在 KV 服务中填写 Key 为 peter, Value 为 https://pzhang.net/ 测试访问 https://friends.mitt.fun/peter 会302跳转到 https://pzhang.net/ 测试访问 https://friends.mitt.fun/peter/archives/ 会302跳转到 https://pzhang.net/archives/ end()又水了一篇，好唉。 (别问我为啥某人不在 Links","categories":[{"name":"scripts","slug":"scripts","permalink":"https://blog.mitt.fun/categories/scripts/"}],"tags":[{"name":"Cloudflare","slug":"Cloudflare","permalink":"https://blog.mitt.fun/tags/Cloudflare/"},{"name":"Scripts","slug":"Scripts","permalink":"https://blog.mitt.fun/tags/Scripts/"},{"name":"Friends","slug":"Friends","permalink":"https://blog.mitt.fun/tags/Friends/"}]},{"title":"域名解析使MX和CNAME共存 解决域名邮箱收发件问题","slug":"domain/dns-mx-cname-coexist","date":"2021-02-26T20:12:22.000Z","updated":"2021-02-27T13:40:22.000Z","comments":true,"path":"dns/2021/domain/dns-mx-cname-coexist/","link":"","permalink":"https://blog.mitt.fun/dns/2021/domain/dns-mx-cname-coexist/","excerpt":"pre-post()因为我自己搞了一个域名邮箱，用的腾讯企业邮箱，之前为了上国内CDN从Cloudflare 迁移出来换成 Cloudflare Partner，用 DNSPOD 实现 GEODNS，国内用 百度CDN，国外用 Cloudflare，通过 CNAME 解析指向，但是后面发现一个问题就是域名邮箱突然无法正常收发邮件了，网上通过谷歌和其他博主的博文得知这是DNS的特性导致的(参考5)，如果想要解决就只能A+MX的共存方式，但是显然这种方式对我来说弊端很多，另一种方案就是将网站解析到www子域名，把@腾出来给MX，或者将域名邮箱解析到 mail 子域名，虽然对大部分人来说可行，但是对我有点强迫症，我就想用@，毕竟chrome都模糊化www和@了，自然是@更适合一点，接下来的方法就是我自己瞎鼓捣出来的，但是又没有查询相关资料证明100%不会出问题，但到目前来看还是很稳的，也不确定放到其他DNS服务商以及其他CDN服务商是否同样有效。","text":"pre-post()因为我自己搞了一个域名邮箱，用的腾讯企业邮箱，之前为了上国内CDN从Cloudflare 迁移出来换成 Cloudflare Partner，用 DNSPOD 实现 GEODNS，国内用 百度CDN，国外用 Cloudflare，通过 CNAME 解析指向，但是后面发现一个问题就是域名邮箱突然无法正常收发邮件了，网上通过谷歌和其他博主的博文得知这是DNS的特性导致的(参考5)，如果想要解决就只能A+MX的共存方式，但是显然这种方式对我来说弊端很多，另一种方案就是将网站解析到www子域名，把@腾出来给MX，或者将域名邮箱解析到 mail 子域名，虽然对大部分人来说可行，但是对我有点强迫症，我就想用@，毕竟chrome都模糊化www和@了，自然是@更适合一点，接下来的方法就是我自己瞎鼓捣出来的，但是又没有查询相关资料证明100%不会出问题，但到目前来看还是很稳的，也不确定放到其他DNS服务商以及其他CDN服务商是否同样有效。 subject(‘实现目标’)能够使用 DNSPOD 使 pwecho.com 支持境内境外不同CDN服务 Cloudflare 和 BaiduCDN，同时兼容 腾讯企业邮箱 subject(‘当前配置’) Cloudflare Partner Name Type Record Remark @ CNAME s-ip.pwecho.com 网站服务器 使用 s-ip.pwecho.com 方便更改IP，CDN需要CNAME指向 s-ip.pwecho.com DNSPOD Name Type Record Region Remark s-ip A x.x.x.x 网站服务器源站IP @ MX mx1.qq.com 默认 腾讯企业邮箱 @ MX mx2.qq.com 默认 腾讯企业邮箱 @ CNAME pwecho.com.cdn.cloudflare.com 境外 Cloudflare @ CNAME pwecho.com.a.bdydns.com 境内 BaiduCDN 虽然 DNSPOD 支持MX和CNAME同时记录，会提示可能会产生不兼容问题，但可以忽略，实际测试会出现无法正常返回MX的情况 subject(‘解决方案’)目前的解决方案是，单独剥离一个CNAME，境外让 Cloudflare 负责提供MX和A记录，境内让 DNSPOD 提供，以下是修改方案 Cloudflare Partner Name Type Record Remark @ CNAME s-ip.pwecho.com 网站服务器 @ MX mx1.qq.com 腾讯企业邮箱 @ MX mx2.qq.com 腾讯企业邮箱 DNSPOD Name Type Record Region Remark s-ip A x.x.x.x 网站服务器源站IP root.cn-bd-cdn CNAME pwecho.com.a.bdydns.com 默认 BaiduCDN root.cn-bd-cdn MX mx1.qq.com 默认 腾讯企业邮箱 root.cn-bd-cdn MX mx2.qq.com 默认 腾讯企业邮箱 @ CNAME pwecho.com.cdn.cloudflare.com 境外 Cloudflare @ CNAME root.cn-bd-cdn.pwecho.com 境内 通过以上配置查询DNS记录即可得出结果 中国地区 123456789101112131415161718192021$ dig MX pwecho.com; &lt;&lt;&gt;&gt; DiG 9.14.8 &lt;&lt;&gt;&gt; MX pwecho.com;; global options: +cmd;; Got answer:;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 11135;; flags: qr rd ra; QUERY: 1, ANSWER: 3, AUTHORITY: 0, ADDITIONAL: 1;; OPT PSEUDOSECTION:; EDNS: version: 0, flags:; udp: 512;; QUESTION SECTION:;pwecho.com. IN MX;; ANSWER SECTION:pwecho.com. 597 IN CNAME root.cn-bd-cdn.pwecho.com.root.cn-bd-cdn.pwecho.com. 597 IN MX 5 mxbiz1.qq.com.root.cn-bd-cdn.pwecho.com. 597 IN MX 10 mxbiz2.qq.com.;; Query time: 10 msec;; SERVER: 192.168.50.1#53(192.168.50.1);; WHEN: Sat Feb 27 14:11:41 ;; MSG SIZE rcvd: 117 1234567891011121314151617$ dig CNAME pwecho.com; &lt;&lt;&gt;&gt; DiG 9.14.8 &lt;&lt;&gt;&gt; CNAME pwecho.com;; global options: +cmd;; Got answer:;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 63349;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 0;; QUESTION SECTION:;pwecho.com. IN CNAME;; ANSWER SECTION:pwecho.com. 563 IN CNAME root.cn-bd-cdn.pwecho.com.;; Query time: 76 msec;; SERVER: 192.168.50.1#53(192.168.50.1);; WHEN: Sat Feb 27 14:12:10 ;; MSG SIZE rcvd: 57 12345678910111213141516171819202122$ dig A pwecho.com; &lt;&lt;&gt;&gt; DiG 9.14.8 &lt;&lt;&gt;&gt; A pwecho.com;; global options: +cmd;; Got answer:;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 12359;; flags: qr rd ra; QUERY: 1, ANSWER: 4, AUTHORITY: 0, ADDITIONAL: 1;; OPT PSEUDOSECTION:; EDNS: version: 0, flags:; udp: 512;; QUESTION SECTION:;pwecho.com. IN A;; ANSWER SECTION:pwecho.com. 37 IN CNAME root.cn-bd-cdn.pwecho.com.root.cn-bd-cdn.pwecho.com. 37 IN CNAME pwecho.com.a.bdydns.com.pwecho.com.a.bdydns.com. 37 IN CNAME opencdncloud.jomodns.com.opencdncloud.jomodns.com. 37 IN A 101.72.249.35;; Query time: 9 msec;; SERVER: 192.168.50.1#53(192.168.50.1);; WHEN: Sat Feb 27 14:15:33 ;; MSG SIZE rcvd: 153 境外地区 123456789101112131415161718192021$ dig MX pwecho.com; &lt;&lt;&gt;&gt; DiG 9.16.1-Ubuntu &lt;&lt;&gt;&gt; MX pwecho.com;; global options: +cmd;; Got answer:;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 48915;; flags: qr rd ra; QUERY: 1, ANSWER: 2, AUTHORITY: 0, ADDITIONAL: 1;; OPT PSEUDOSECTION:; EDNS: version: 0, flags:; udp: 1232;; QUESTION SECTION:;pwecho.com. IN MX;; ANSWER SECTION:pwecho.com. 600 IN MX 10 mxbiz2.qq.com.pwecho.com. 600 IN MX 5 mxbiz1.qq.com.;; Query time: 276 msec;; SERVER: 1.1.1.1#53(1.1.1.1);; WHEN: Sat Feb 27 07:14:54 CET 2021;; MSG SIZE rcvd: 88 1234567891011121314151617181920$ dig CNAME pwecho.com; &lt;&lt;&gt;&gt; DiG 9.16.1-Ubuntu &lt;&lt;&gt;&gt; CNAME pwecho.com;; global options: +cmd;; Got answer:;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 55778;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 1;; OPT PSEUDOSECTION:; EDNS: version: 0, flags:; udp: 1232;; QUESTION SECTION:;pwecho.com. IN CNAME;; ANSWER SECTION:pwecho.com. 600 IN CNAME pwecho.com.cdn.cloudflare.net.;; Query time: 276 msec;; SERVER: 1.1.1.1#53(1.1.1.1);; WHEN: Sat Feb 27 07:14:43 CET 2021;; MSG SIZE rcvd: 82 1234567891011121314151617181920212223$ dig A pwecho.com; &lt;&lt;&gt;&gt; DiG 9.16.1-Ubuntu &lt;&lt;&gt;&gt; A pwecho.com;; global options: +cmd;; Got answer:;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 35366;; flags: qr rd ra; QUERY: 1, ANSWER: 4, AUTHORITY: 0, ADDITIONAL: 1;; OPT PSEUDOSECTION:; EDNS: version: 0, flags:; udp: 1232;; QUESTION SECTION:;pwecho.com. IN A;; ANSWER SECTION:pwecho.com. 600 IN CNAME pwecho.com.cdn.cloudflare.net.pwecho.com.cdn.cloudflare.net. 300 IN A 104.26.6.173pwecho.com.cdn.cloudflare.net. 300 IN A 104.26.7.173pwecho.com.cdn.cloudflare.net. 300 IN A 172.67.69.29;; Query time: 280 msec;; SERVER: 1.1.1.1#53(1.1.1.1);; WHEN: Sat Feb 27 07:17:11 CET 2021;; MSG SIZE rcvd: 130 从上面结果可以看出，pwecho.com.cdn.cloudflare.net 本身返回的就是 A 记录，而它做的只是将你的 MX 记录也加到他的 CNAME 域名解析中，所以完全没有问题，而 DNSPOD 虽然还是返回 CNAME 来解析 A 记录，但是实测多次并没有发现出现查询 MX, CNAME 混乱返回的情况, 但同样我也尚未能提供资料证明不会出现这个问题。 ⚠️ 补充测试结果: 通过 https://www.boce.com/dns/ 测试发现全国查询的时候会有部分地区随机返回 CNAME 记录，所以这个方法还是不稳定，Cloudflare 那种实现对境外邮箱来说则完全没有问题 其实这里还有个发现，即便是国内的 QQ邮箱, 腾讯企业邮箱, 163邮箱 或者是国外的 Gmail, Outlook 都会查询出境外的MX记录，即便境内没设置MX记录也可，所以如果不放心其实可以直接干掉境内的MX记录，只让 Cloudflare 返回 MX 记录也可以稳定运作 (不打包票，境内还有很多邮箱没有做测试 参考资料 域名解析的 MX 和 CNAME 记录冲突 - 谢先斌的博客 解析记录冲突规则 - 阿里云文档 三种方法解决域名解析的主机记录冲突 - Erdong’ Blog 域名 MX 记录与 CNAME 冲突 - 老鬼的博客 RCF 1034 - 下载PDF文件 DNS using CNAMEs breaks MX records? - StackExchange","categories":[{"name":"dns","slug":"dns","permalink":"https://blog.mitt.fun/categories/dns/"}],"tags":[{"name":"DNS","slug":"DNS","permalink":"https://blog.mitt.fun/tags/DNS/"},{"name":"域名邮箱","slug":"域名邮箱","permalink":"https://blog.mitt.fun/tags/%E5%9F%9F%E5%90%8D%E9%82%AE%E7%AE%B1/"},{"name":"企业邮箱","slug":"企业邮箱","permalink":"https://blog.mitt.fun/tags/%E4%BC%81%E4%B8%9A%E9%82%AE%E7%AE%B1/"},{"name":"GEODNS","slug":"GEODNS","permalink":"https://blog.mitt.fun/tags/GEODNS/"},{"name":"区域解析","slug":"区域解析","permalink":"https://blog.mitt.fun/tags/%E5%8C%BA%E5%9F%9F%E8%A7%A3%E6%9E%90/"},{"name":"MX共存","slug":"MX共存","permalink":"https://blog.mitt.fun/tags/MX%E5%85%B1%E5%AD%98/"},{"name":"MX","slug":"MX","permalink":"https://blog.mitt.fun/tags/MX/"},{"name":"CNAME","slug":"CNAME","permalink":"https://blog.mitt.fun/tags/CNAME/"},{"name":"Cloudflare","slug":"Cloudflare","permalink":"https://blog.mitt.fun/tags/Cloudflare/"},{"name":"Dnspod","slug":"Dnspod","permalink":"https://blog.mitt.fun/tags/Dnspod/"},{"name":"百度CDN","slug":"百度CDN","permalink":"https://blog.mitt.fun/tags/%E7%99%BE%E5%BA%A6CDN/"}]},{"title":"关于《Kubernetes 混合云用Kilo解决NAT节点通讯的问题》的那件事","slug":"kubernetes/k8s-混合云组网","date":"2021-02-25T05:07:29.000Z","updated":"2021-02-25T05:07:29.000Z","comments":true,"path":"service/kubernetes/2021/kubernetes/k8s-混合云组网/","link":"","permalink":"https://blog.mitt.fun/service/kubernetes/2021/kubernetes/k8s-%E6%B7%B7%E5%90%88%E4%BA%91%E7%BB%84%E7%BD%91/","excerpt":"pre-post()最近有在学习K8S相关，同时也将自己的所有服务全部都迁移到了K8S集群上，感受到K8S强大的同时也能明显感受到对于我这种一般用户环境的部署不是很友好，例如建议的高可用集群至少要有 三台 Master, 三台 Worker, 对我这种 穷逼 普通玩家来说是很高昂的，但经过几次实践把生产环境搞炸几次后觉得这是有必要的(哭)，但我的想法是用K8S作为我主要部署方式，所以还是非常高昂的，像我这种为了能够管理所有节点但是又不会重度使用K8S的，这里推荐 K3S 来代替K8S作为要求不高的生产环境，不过这篇文章还是用完整的K8S来做，但理论上 K3S 是完全通用的。","text":"pre-post()最近有在学习K8S相关，同时也将自己的所有服务全部都迁移到了K8S集群上，感受到K8S强大的同时也能明显感受到对于我这种一般用户环境的部署不是很友好，例如建议的高可用集群至少要有 三台 Master, 三台 Worker, 对我这种 穷逼 普通玩家来说是很高昂的，但经过几次实践把生产环境搞炸几次后觉得这是有必要的(哭)，但我的想法是用K8S作为我主要部署方式，所以还是非常高昂的，像我这种为了能够管理所有节点但是又不会重度使用K8S的，这里推荐 K3S 来代替K8S作为要求不高的生产环境，不过这篇文章还是用完整的K8S来做，但理论上 K3S 是完全通用的。 subject(‘实现目标’)利用 Kilo 将带有公网IP的NAT云服务器组成K8S集群，支持 P2P, DDNS (要求有公网IP且需要端口映射) subject(‘Kilo介绍’)Kilo 是一个通过 Wireguard 用于建立混合云网络的工具 subject(‘现有问题’)我的服务器构成是这样的(以下IP皆为虚拟): Name ifc-IP Location Role Nat k8s-master 123.123.123.123 Hetzner Master NO cn-sh01-node 10.0.0.4 QCloud Worker YES cn-hz01-node 192.168.1.120 Home Worker YES 可以看到我的三台服务器都不是同一个网段甚至都不是同一个服务商的。所以会有几个问题 kube-proxy 无法正常工作转发流量 metrics 采集无法工作 logs/shell 无法工作 subject(‘解决问题’)之前是用 Weave 来作为CNI的，然后为了解决 kube-proxy 的一些问题换成了 Flannel, 网上查找一些资料和issues以后发现如果要解决这个问题，就得先将所有节点连起来，连起来的方法就是VPN，然后让通讯流量走VPN接口即可解决，但是按常规理解VPN流量是需要中心服务器转发流量的，那就会导致所有流量转发到同一台服务器，压力和延迟也会非常大不符合需求，然后我去搜了P2P VPN发现 Wireguard 是支持Peer2Peer的，顺势在某个issue里看到有人提到用 Kilo 进行自动组网，并且 Kilo 是支持在 Flannel 之上运行的 端口通讯检查我是采用 Flannel+Calico+Kilo 的方式设置网络的，所以需要以下端口放通 Port Range Protocol Remark 8285 UDP Flannel 8472 UDP Flannel 51820 UDP Wireguard 默认端口 10250 TCP Kubelet API 30000-32767 TCP+UDP NodePort 服务端口 安装 KiloKubeadm 1$ kubectl apply -f https://raw.githubusercontent.com/squat/kilo/master/manifests/kilo-kubeadm-flannel.yaml 如果要卸载，直接 kubectl delete 就好了 配置外部连接IP由于目前尚未支持 NAT to NAT(理论可以实现)，所以每个Node都必须具备外部(公网)访问条件，但是你会发现一件事，每个Node都只会拿到网卡的IP，它没办法发现你的外部IP 所以就像 Flannel 通过 flannel.alpha.coreos.com/public-ip-overwrite 来覆写外部通讯IP一样 Kilo 同样也提供了 kilo.squat.ai/force-endpoint 来指定外部通讯连接点，格式是 &quot;IP:PORT&quot; 或者 &quot;[DOMAIN]:PORT&quot;，是的，它支持域名，所以就可以实现我们 HOME worker的DDNS需求，只要防火墙放通端口或者路由器转发端口就可以自由通讯了 编辑 cn-hz01-node 节点，在 metadata.annotations 里加入 kilo.squat.ai/force-endpoint: &#39;[home.mydomain.com]:51820&#39;，然后过一会通过 kubectl desc node cn-hz01-node 就可以看到它自动解析了域名并且添加了一个新的 kilo.squat.ai/endpoint annotation，值为你域名指向的IP 同样此方法去更改 cn-sh01-node 的 annotations，过一会就可以看到 metrics 信息已经正常显示了(前提是你已经部署了metrics采集) 建议采用 Flannel 的 vxlan 作为后端，不采用 IPSec 等加密后端避免不必要的二次开销 关于N2N实现 目前 Kilo 的N2N实现还在讨论并且已经在计划适配，具体可以在这里看到 https://github.com/squat/kilo/issues/109 subject(‘不通过VPN外部直连的可能性’)说个题外话，假如全部NODE都是有公网IP但是会有一层NAT的能不能正常通讯呢，这个读过一点Kubernetes的代码，这个是有可能的，就是更改Node的 status.addresses 添加一个 Type 为 ExternalIP 的IP地址，但是这里有个问题就是，你没办法直接编辑或者patch一个node的status值，那么这个addresses是怎么来的呢？ addresses 实际上是通过 cloud-provider 设置的，他读取你的网卡并将其IP设置为 InternalIP 的address, 如果你是GCE, Azure等，他们会去跟平台通讯获取你机器的外网绑定网卡信息，并且设置为 ExternalIP，而 metrics-server 的默认启动参数 --kubelet-preferred-address-types=ExternalIP,InternalIP,Hostname 定义了它会尝试去和外部IP、内部IP、主机名进行通讯，所以如果你是通过云服务商的k8s托管，那么它就会自动设置外部IP，但是手工设置是行不通的，所以如果自己写一个 “Fake” cloud-provider 的话也许也行得通，但其实价值就很低了，不如直接VPN组网来的实在。","categories":[{"name":"service","slug":"service","permalink":"https://blog.mitt.fun/categories/service/"},{"name":"kubernetes","slug":"service/kubernetes","permalink":"https://blog.mitt.fun/categories/service/kubernetes/"}],"tags":[{"name":"Wireguard","slug":"Wireguard","permalink":"https://blog.mitt.fun/tags/Wireguard/"},{"name":"Kilo","slug":"Kilo","permalink":"https://blog.mitt.fun/tags/Kilo/"},{"name":"Peer2Peer","slug":"Peer2Peer","permalink":"https://blog.mitt.fun/tags/Peer2Peer/"},{"name":"Kubernetes","slug":"Kubernetes","permalink":"https://blog.mitt.fun/tags/Kubernetes/"},{"name":"K8S","slug":"K8S","permalink":"https://blog.mitt.fun/tags/K8S/"},{"name":"K3S","slug":"K3S","permalink":"https://blog.mitt.fun/tags/K3S/"}]},{"title":"Docker - 给每个容器配置公网IP","slug":"docker/Docker-给每个容器配置公网IP","date":"2018-05-01T12:28:08.000Z","updated":"2021-02-25T11:57:00.000Z","comments":true,"path":"service/2018/docker/Docker-给每个容器配置公网IP/","link":"","permalink":"https://blog.mitt.fun/service/2018/docker/Docker-%E7%BB%99%E6%AF%8F%E4%B8%AA%E5%AE%B9%E5%99%A8%E9%85%8D%E7%BD%AE%E5%85%AC%E7%BD%91IP/","excerpt":"pre-post()为了方便部署流量转发服务，采用了Docker来干这个事，一般情况下一台节点只有一个IP，使用端口映射或者用参数 --network host 直接使用主机的网络来监听和转发是没有问题的，但是有一些节点会存在多个或一个段的外部IP，这时候虽然 IN 方向没有问题，但是 OUT 方向只会采用主机设置的默认路由来访问，就导致了转发的流量都使用同一个IP转发出去了，这是不对的，所以接下来就研究如何才能自定义出口流量，这篇文章则采用给容器配置外部IP的方式实现。 此方法适合非NAT主机","text":"pre-post()为了方便部署流量转发服务，采用了Docker来干这个事，一般情况下一台节点只有一个IP，使用端口映射或者用参数 --network host 直接使用主机的网络来监听和转发是没有问题的，但是有一些节点会存在多个或一个段的外部IP，这时候虽然 IN 方向没有问题，但是 OUT 方向只会采用主机设置的默认路由来访问，就导致了转发的流量都使用同一个IP转发出去了，这是不对的，所以接下来就研究如何才能自定义出口流量，这篇文章则采用给容器配置外部IP的方式实现。 此方法适合非NAT主机 subject(‘实现目标’)给每个 Docker 容器都配置不同的公网IP出口 solution(‘附加网络到容器’)12345678# 从 eth1 接口删除IP$ sudo ip addr del 192.168.33.10/24 dev eth1# 创建一个桥接名称为 “docker1” 的 shared_nw 网络$ sudo docker network create --driver bridge --subnet=192.168.33.0/24 --gateway=192.168.33.10 --opt &quot;com.docker.network.bridge.name&quot;=&quot;docker1&quot; shared_nw# 添加 “docker1” 到 eth1$ sudo brctl addif docker1 eth1 其中 192.168.33.0/24 是子网段, 192.168.33.10 是IP地址 123# 通过 curl 容器来验证IP结果$ docker run -it curlimages/curl --net shared_nw --ip 192.168.33.11 ip.sb# 输出结果: 192.168.33.11 这样这个容器本身的IP就变成了外部IP 弊端采用这种方法会把主机的IP剥离，如果你没有其他接入网卡的话会导致断网无法外部进入，只能通过 Console 来调整 参考来源 https://forums.docker.com/t/public-accessible-ip-in-container-like-bridge-network-in-virtualbox/3668/6 https://qiita.com/kjtanaka/items/f16757c1f0cc86ff225b solution(‘桥接网络IP’)12# 创建名为 &quot;pnet01&quot; 的 macvlan 网络$ docker network create -d macvlan --subnet 23.89.4.0/24 --gateway 23.89.4.1 -o parent=ens3 --aux-address=&quot;master=23.89.4.205&quot; pnet01 其中 23.89.4.0/24 是子网段, 23.89.4.1 是网关地址, ens3 是网卡接口名称, 23.89.4.205 是外部IP 123# 通过 curl 容器来验证IP结果$ docker run -it curlimages/curl --net pnet01 --ip 23.89.4.207 ip.sb# 输出结果: 23.89.4.207 其中 23.89.4.207 是要分配给容器的同网段的IP 其他信息主机 123456789101112131415# ifconfigens3: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt; mtu 1500 inet 23.89.4.205 netmask 255.255.255.0 broadcast 23.89.4.255 inet6 fe80::216:3cff:fe7e:fbeb prefixlen 64 scopeid 0x20&lt;link&gt; ether 00:16:3c:7e:fb:eb txqueuelen 1000 (Ethernet) RX packets 96281 bytes 7457992 (7.1 MiB) RX errors 0 dropped 0 overruns 0 frame 0 TX packets 5325 bytes 1603561 (1.5 MiB) TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0# routeDestination Gateway Genmask Flags Metric Ref Use Ifacedefault 1.4-89-23.rdns. 0.0.0.0 UG 0 0 0 ens3localnet 0.0.0.0 255.255.255.0 U 0 0 0 ens3172.17.0.0 0.0.0.0 255.255.0.0 U 0 0 0 docker0 容器内 12345678910111213# ifconfigeth0 Link encap:Ethernet HWaddr 02:42:17:59:04:CF inet addr:23.89.4.207 Bcast:0.0.0.0 Mask:255.255.255.0 UP BROADCAST RUNNING MULTICAST MTU:1500 Metric:1 RX packets:27457 errors:0 dropped:0 overruns:0 frame:0 TX packets:579 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:0 RX bytes:1839527 (1.7 MiB) TX bytes:81473 (79.5 KiB)# routeDestination Gateway Genmask Flags Metric Ref Use Ifacedefault 1.4-89-23.rdns. 0.0.0.0 UG 0 0 0 eth023.89.4.0 * 255.255.255.0 U 0 0 0 eth0 弊端仅适用于拥有一个段的IP的服务器，采用这种方式的主机会保留一个IP用于通讯和桥接，然后分配同网段的其他IP给容器，如果有不同网段和网关的IP，就需要同样创建第二个网络 参考来源 https://docs.docker.com/network/network-tutorial-macvlan/#bridge-example https://www.aquasec.com/wiki/display/containers/Docker+Networking+101 subject(‘End’)这篇文章内容是 2018 年写的，一直咕咕到 2021 年才补上，对现在的我来说对容器以及网络方面有了新的理解，所以这篇文章内容其实也算是有点 过时 了，还有一个方法是采用 iptables NAT进行实现，但是人工维护显然有些繁琐，虽然我没有再这个方向继续研究了，但是希望能给有需要的人一个参考。","categories":[{"name":"service","slug":"service","permalink":"https://blog.mitt.fun/categories/service/"}],"tags":[{"name":"Docker","slug":"Docker","permalink":"https://blog.mitt.fun/tags/Docker/"}]},{"title":"Hello World","slug":"hello-world","date":"2018-01-28T17:30:37.000Z","updated":"2021-02-25T03:57:00.000Z","comments":true,"path":"misc/2018/hello-world/","link":"","permalink":"https://blog.mitt.fun/misc/2018/hello-world/","excerpt":"","text":"Hello Everyone, I’m Mitt, and I wish you all Have fun every day!","categories":[],"tags":[{"name":"Milestone","slug":"Milestone","permalink":"https://blog.mitt.fun/tags/Milestone/"}]}],"categories":[{"name":"scripts","slug":"scripts","permalink":"https://blog.mitt.fun/categories/scripts/"},{"name":"dns","slug":"dns","permalink":"https://blog.mitt.fun/categories/dns/"},{"name":"service","slug":"service","permalink":"https://blog.mitt.fun/categories/service/"},{"name":"kubernetes","slug":"service/kubernetes","permalink":"https://blog.mitt.fun/categories/service/kubernetes/"}],"tags":[{"name":"Cloudflare","slug":"Cloudflare","permalink":"https://blog.mitt.fun/tags/Cloudflare/"},{"name":"Scripts","slug":"Scripts","permalink":"https://blog.mitt.fun/tags/Scripts/"},{"name":"Friends","slug":"Friends","permalink":"https://blog.mitt.fun/tags/Friends/"},{"name":"DNS","slug":"DNS","permalink":"https://blog.mitt.fun/tags/DNS/"},{"name":"域名邮箱","slug":"域名邮箱","permalink":"https://blog.mitt.fun/tags/%E5%9F%9F%E5%90%8D%E9%82%AE%E7%AE%B1/"},{"name":"企业邮箱","slug":"企业邮箱","permalink":"https://blog.mitt.fun/tags/%E4%BC%81%E4%B8%9A%E9%82%AE%E7%AE%B1/"},{"name":"GEODNS","slug":"GEODNS","permalink":"https://blog.mitt.fun/tags/GEODNS/"},{"name":"区域解析","slug":"区域解析","permalink":"https://blog.mitt.fun/tags/%E5%8C%BA%E5%9F%9F%E8%A7%A3%E6%9E%90/"},{"name":"MX共存","slug":"MX共存","permalink":"https://blog.mitt.fun/tags/MX%E5%85%B1%E5%AD%98/"},{"name":"MX","slug":"MX","permalink":"https://blog.mitt.fun/tags/MX/"},{"name":"CNAME","slug":"CNAME","permalink":"https://blog.mitt.fun/tags/CNAME/"},{"name":"Dnspod","slug":"Dnspod","permalink":"https://blog.mitt.fun/tags/Dnspod/"},{"name":"百度CDN","slug":"百度CDN","permalink":"https://blog.mitt.fun/tags/%E7%99%BE%E5%BA%A6CDN/"},{"name":"Wireguard","slug":"Wireguard","permalink":"https://blog.mitt.fun/tags/Wireguard/"},{"name":"Kilo","slug":"Kilo","permalink":"https://blog.mitt.fun/tags/Kilo/"},{"name":"Peer2Peer","slug":"Peer2Peer","permalink":"https://blog.mitt.fun/tags/Peer2Peer/"},{"name":"Kubernetes","slug":"Kubernetes","permalink":"https://blog.mitt.fun/tags/Kubernetes/"},{"name":"K8S","slug":"K8S","permalink":"https://blog.mitt.fun/tags/K8S/"},{"name":"K3S","slug":"K3S","permalink":"https://blog.mitt.fun/tags/K3S/"},{"name":"Docker","slug":"Docker","permalink":"https://blog.mitt.fun/tags/Docker/"},{"name":"Milestone","slug":"Milestone","permalink":"https://blog.mitt.fun/tags/Milestone/"}]}